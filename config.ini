###
# app configuration
#
# If you are only looking to get the app running without delving too much into
# configuration, all you need to worry about is `sqlalchemy.url`.
#
# http://docs.pylonsproject.org/projects/pyramid/en/1.7-branch/narr/environment.html
###

[app:main]
use = egg:chiplibrary
# Reloads templates upon modification.  If you are not in a development
# environment, disable this for increased performance.
pyramid.reload_templates = true
pyramid.debug_authorization = false
pyramid.debug_notfound = true
pyramid.debug_routematch = false
pyramid.default_locale_name = en
pyramid.includes = pyramid_debugtoolbar
#
# dogpile.cache Settings
#
# If you are using a file-based store, you MUST
# specify `dogpile_cache.arguments.filename` for it to work.  If you use redis
# or memcached, specify the relevant cache store and the host/port settings.
#
# For more information, consult the dogpile_cache.cache documentation online.
#
dogpile.cache.regions = default
dogpile.cache.backend = file
dogpile.cache.expiration_time = 3600
dogpile.cache.arguments.host = 
dogpile.cache.arguments.port = 
dogpile.cache.arguments.distributed_lock = true
dogpile.cache.arguments.filename = %(here)s/chiplibrary-dogpile_cache.dbm
#
# SQLAlchemy Settings
#
# You must already have a database created before setup, as chiplibrary will
# not create one for you.
#
# NOTE: In order to avoid Unicode errors, make sure that the specified
# connection is set to use Unicode at all times.
#
# MySQL Example:
# mysql://user:password@host/database?charset=utf8&use_unicode=1
#
# For more information, consult the SQLAlchemy documentation online.
sqlalchemy.url = sqlite:///%(here)s/chiplibrary.sqlite
#
# Session Settings
#
# Do not leave `session.secret` blank, and remember not to share it with anyone.
# It wouldn't be a secret otherwise. ;)
#
session.type = file
session.data_dir = %(here)s/data/sessions/data
session.lock_dir = %(here)s/data/sessions/lock
session.secret = 
#
#
# python-social-auth Settings
#
# For an extensive list of supported authentication providers:
#
#   http://psa.matiasaguirre.net/docs/backends/index.html
#
psa.google.key =
psa.google.secret =

psa.twitter.key =
psa.twitter.secret =

psa.facebook.app.key =
psa.facebook.app.secret =
psa.facebook.app.namespace =

psa.yahoo.key =
psa.yahoo.secret =

psa.linkedin.key =
psa.linkedin.secret =
psa.linkedin.scope =

psa.github.key =
psa.github.secret =

psa.instagram.key =
psa.instagram.secret =

psa.flickr.key =
psa.flickr.secret =

psa.reddit.key =
psa.reddit.secret =

psa.steam.key =
psa.steam.extra =
    player

psa.authentication_backends =
    social.backends.twitter.TwitterOAuth
    social.backends.google.GoogleOAuth2
    social.backends.yahoo.YahooOAuth
    social.backends.linkedin.LinkedinOAuth
    social.backends.github.GithubOAuth2
    social.backends.flickr.FlickrOAuth
    social.backends.reddit.RedditOAuth2
    social.backends.steam.SteamOpenId
#    social.backends.facebook.FacebookAppOAuth2
#    social.backends.instagram.InstagramOAuth2

#
# Whoosh Settings
#
# By default, if `whoosh.store` is not defined, whoosh-data/ shall be created
# based on the current .INI directory.
#
whoosh.store = %(here)s/whoosh-data
whoosh.indexname = chips
whoosh.debug = false
# By default, the toolbar only appears for clients from IP addresses
# '127.0.0.1'
debugtoolbar.hosts = 127.0.1
debugtoolbar.enabled = true
#
# Debug Toolbar Settings
#
# IMPORTANT: If you are running chiplibrary on a production environment, the
# debugtoolbar should not be enabled..
#
# By default, the toolbar only appears for clients from IP addresses
#
# '127.0.0.1' and '::1'.
# debugtoolbar.hosts = 127.0.0.1 ::1
# debugtoolbar.enabled = true

###
# wsgi server configuration
###

[server:main]
use = egg:waitress#main
host = 127.0.1
port = 6543

###
# logging configuration
# http://docs.pylonsproject.org/projects/pyramid/en/1.7-branch/narr/logging.html
###

[loggers]
keys = root, chiplibrary, sqlalchemy

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console

[logger_chiplibrary]
level = DEBUG
handlers =
qualname = chiplibrary

[logger_sqlalchemy]
level = INFO
handlers =
qualname = sqlalchemy.engine
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s:%(lineno)s][%(threadName)s] %(message)s
